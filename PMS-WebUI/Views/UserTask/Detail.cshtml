@model ProjectTaskDto

<div id="loading">
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
</div>

<div class="container mt-5">
    <div class="header">
        <h1>Proje Adı: @Model.Project.ProjectName</h1>
        <p>Açıklama: @Model.Project.Description</p>
        <p>Başlangıç Tarihi: @Model.Project.StartDate.ToShortDateString()</p>
        <p>Bitiş Tarihi: @Model.Project.EndDate.ToShortDateString()</p>
        <p>Durum: @Model.Project.Priority</p>
    </div>
    <form id="updateTaskForm" asp-controller="Project" asp-action="UpdateTaskStatus" method="post">
        @Html.AntiForgeryToken()
    </form>
    @if(Model.UserTasks.Count() == 0)
    {
        <div class="empty-state">
            <img src="~/images/empty_state.png" alt="No Tasks" class="empty-state-image" />
            <h2>Hiç Görev Yok!</h2>
            <p>Bu projeye ait henüz bir göreviniz bulunmamaktadır. Yöneticinizle İletişime Geçebilirsiniz!</p>
        </div>
    }
    else
    {
        <div class="columns">
            <div class="column" id="ToDo">
                <h2>Yapılacaklar</h2>
                @foreach (var task in Model.UserTasks.Where(t => t.UpdateStatus.ToString() == "ToDo"))
                {
                    <div class="task card" id="task-@task.Id" draggable="true" data-enddate="@task.EndDate" data-status="ToDo">
                        <h3>@task.TaskName</h3>
                        <p><strong>Öncelik: </strong>@task.Priority</p>
                        <p>Başlangıç Tarihi: @task.StartDate.ToShortDateString()</p>
                        <p>Son Tarih: @task.EndDate.ToShortDateString()</p>
                        <div class="card-footer align-content-center">
                            <button class="btn btn-dark task-details-btn" data-task-id="@task.Id">Görev Detayları</button>
                        </div>
                    </div>
                }
            </div>
            <div class="column" id="InProgress">
                <h2>Devam Edenler</h2>
                @foreach (var task in Model.UserTasks.Where(t => t.UpdateStatus.ToString() == "InProgress"))
                {
                    <div class="task card" id="task-@task.Id" draggable="true" data-enddate="@task.EndDate" data-status="InProgress">
                        <h3>@task.TaskName</h3>
                        <p><strong>Öncelik: </strong>@task.Priority</p>
                        <p>Başlangıç Tarihi: @task.StartDate.ToShortDateString()</p>
                        <p>Son Tarih: @task.EndDate.ToShortDateString()</p>
                        <div class="card-footer align-content-center">
                            <button class="btn btn-dark task-details-btn" data-task-id="@task.Id">Görev Detayları</button>
                        </div>
                    </div>
                }
            </div>
            <div class="column" id="Completed">
                <h2>Tamamlananlar</h2>
                @foreach (var task in Model.UserTasks.Where(t => t.UpdateStatus.ToString() == "Completed"))
                {
                    <div class="task card" id="task-@task.Id" draggable="true" data-enddate="@task.EndDate" data-status="Completed">
                        <h3>@task.TaskName</h3>
                        <p><strong>Öncelik: </strong>@task.Priority</p>
                        <p>Başlangıç Tarihi: @task.StartDate.ToShortDateString()</p>
                        <p>Son Tarih: @task.EndDate.ToShortDateString()</p>
                        <div class="card-footer align-content-center">
                            <button class="btn btn-dark task-details-btn" data-task-id="@task.Id">Görev Detayları</button>
                        </div>
                    </div>
                }
            </div>
            <div class="column" id="Expired">
                <h2>Süresi Geçenler</h2>
                @foreach (var task in Model.UserTasks.Where(t => t.UpdateStatus.ToString() == "Expired"))
                {
                    <div class="task card expired" id="task-@task.Id" data-enddate="@task.EndDate" data-status="Expired">
                        <h3>@task.TaskName</h3>
                        <p><strong>Öncelik: </strong>@task.Priority</p>
                        <p>Başlangıç Tarihi: @task.StartDate.ToShortDateString()</p>
                        <p>Son Tarih: @task.EndDate.ToShortDateString()</p>
                        <div class="card-footer align-content-center">
                            <button class="btn btn-dark task-details-btn" data-task-id="@task.Id">Görev Detayları</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    <div class="success">
        <a asp-area="" asp-controller="Mail" asp-action="Index" asp-route-projectId="@Model.Project.Id" class="btn btn-success btn-success">Yöneticiyle İletişime Geç</a>
    </div>
    
</div>
<!-- Modal -->
<div class="modal fade" id="taskDetailModal" tabindex="-1" role="dialog" aria-labelledby="taskDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskDetailModalLabel">Görev Detayları</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h3 id="modalTaskName"></h3>
                <p><strong>Öncelik: </strong><span id="modalTaskPriority"></span></p>
                <p><strong>Başlangıç Tarihi: </strong><span id="modalTaskStartDate"></span></p>
                <p><strong>Son Tarih: </strong><span id="modalTaskEndDate"></span></p>
                <p><strong>Durum: </strong><span id="modalTaskStatus"></span></p>
                <p><strong>Açıklama: </strong><span id="modalTaskDescription"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        function getStatusText(statusCode) {
            switch (statusCode) {
                case 0:
                    return 'Yapılacak';
                case 1:
                    return 'Devam Ediyor';
                case 2:
                    return 'Tamamlandı';
                case 3:
                    return "Süresi Geçti"
                default:
                    return '';
            }
        }

        function getPriorityText(priorityCode) {
            switch (priorityCode) {
                case 0:
                    return 'Düşük';
                case 1:
                    return 'Orta';
                case 2:
                    return 'Yüksek';
                default:
                    return '';
            }
        }
        function showModal(taskId) {
            fetch(`/api/TaskApi/get-task-detail?taskId=${taskId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(task => {
                    document.getElementById('modalTaskName').innerText = task.taskName;
                    document.getElementById('modalTaskPriority').innerText = getPriorityText(task.priority);
                    document.getElementById('modalTaskStartDate').innerText = new Date(task.startDate).toLocaleDateString();
                    document.getElementById('modalTaskEndDate').innerText = new Date(task.endDate).toLocaleDateString();
                    document.getElementById('modalTaskStatus').innerText = getStatusText(task.updateStatus);
                    document.getElementById('modalTaskDescription').innerText = task.description;

                    // Modal'ı göster
                    $('#taskDetailModal').modal('show');
                })
                .catch(error => {
                    console.error('Error fetching task details:', error);
                });
        }

        document.querySelectorAll('.task-details-btn').forEach(button => {
            button.addEventListener('click', (event) => {
                const taskId = event.target.dataset.taskId;
                showModal(taskId);
            });
        });
    });

</script>
<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        const tasks = document.querySelectorAll('.task');
        const columns = document.querySelectorAll('.column');
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        function updateTaskStatus(taskId, newStatus) {
            if (!isValidGuid(taskId)) {
                console.error('Invalid taskId format', taskId);
                return;
            }

            console.log('Updating task status:', { taskId, newStatus });

            fetch('/api/TaskApi/UpdateTaskStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ taskId: taskId, newStatus: newStatus })
            })
                .then(response => {
                    if (!response.ok) {
                        console.error('Failed to update task status:', response.statusText);
                        return response.json().then(err => {
                            console.error('Error details:', err);
                        });
                    } else {
                        return response.json();
                    }
                })
                .then(data => {
                    console.log('Success:', data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function isValidGuid(guid) {
            const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
            return guidRegex.test(guid);
        }

        function checkTaskDates() {
            const now = new Date();
            tasks.forEach(task => {
                const endDate = new Date(task.dataset.enddate);
                const status = task.dataset.status;

                if (status !== 'Completed' && endDate < now) {
                    task.classList.add('expired');
                    task.setAttribute('draggable', 'false');
                    updateTaskStatus(task.id.replace('task-', ''), 'Expired');
                    document.getElementById('Expired').appendChild(task);
                }

                if (status === 'Completed') {
                    task.setAttribute('draggable', 'false');
                    task.classList.add('completed');
                }
            });
        }

        tasks.forEach(task => {
            task.addEventListener('dragstart', dragStart);
            task.addEventListener('dragend', dragEnd);
        });

        columns.forEach(column => {
            column.addEventListener('dragover', dragOver);
            column.addEventListener('drop', drop);
        });

        function dragStart(event) {
            event.dataTransfer.setData('text/plain', event.target.id);
            setTimeout(() => {
                event.target.classList.add('hide');
            }, 0);
        }

        function dragEnd(event) {
            event.target.classList.remove('hide');
        }

        function dragOver(event) {
            event.preventDefault();
        }

        function drop(event) {
            event.preventDefault();
            const id = event.dataTransfer.getData('text');
            const draggable = document.getElementById(id);

            if (!draggable.classList.contains('expired') && !draggable.classList.contains('completed')) {
                const nearestColumn = event.target.closest('.column');
                if (nearestColumn) {
                    nearestColumn.appendChild(draggable);
                    draggable.classList.remove('hide');

                    const newStatus = nearestColumn.id;
                    const taskId = id.replace('task-', '');

                    if (isValidGuid(taskId)) {
                        updateTaskStatus(taskId, newStatus);
                    } else {
                        console.error('Invalid taskId format', taskId);
                    }
                }
            }
        }

        checkTaskDates();
        setInterval(checkTaskDates, 60000); // Check every minute
    });

</script>

<style>
    body {
        background-color: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #495057;
        margin: 0;
        padding: 0;
    }

    .container {
        max-width: 1500px;
        margin: 0 auto;
        padding: 20px;
    }

    .header {
        text-align: center;
        margin-bottom: 40px;
    }

        .header h1 {
            font-size: 2.5em;
            color: #343a40;
        }

        .header p {
            font-size: 1.1em;
            color: #6c757d;
        }

    .columns {
        display: flex;
        margin-bottom: 50px;
        padding-bottom: 20px;
        justify-content: space-between;
        gap: 20px;
    }
    .card .footer{
        margin-left:50px;
    }
    .column {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 20px;
        padding-bottom: 200px;
        width: 35%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }


        .column h2 {
            font-size: 1.5em;
            color: #343a40;
            margin-bottom: 20px;
            border-bottom: 2px solid #f1f1f1;
            padding-bottom: 10px;
        }

    .task {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s, transform 0.3s;
    }

        .task:hover {
            background-color: #f1f1f1;
            transform: translateY(-2px);
        }

        .task h3 {
            font-size: 1.2em;
            color: #343a40;
            margin-bottom: 10px;
        }

        .task p {
            font-size: 1em;
            color: #6c757d;
            margin: 5px 0;
        }

    .hide {
        display: none;
    }

    .task.expired {
        background-color: #f8d7da; /* Light red for expired tasks */
        cursor: not-allowed;
    }
    /* Draggable CSS */
    .task[draggable="true"] {
        cursor: grab;
    }

        .task[draggable="true"]:active {
            cursor: grabbing;
        }

    #ToDo {
        background-color: #f8d7da;
    }

    #InProgress {
        background-color: #fff3cd;
    }

    #Completed {
        background-color: #d4edda;
    }

    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        margin-top: 100px; /* Yukarıdan biraz boşluk bırakmak için */
    }

    .empty-state-image {
        max-width: 200px; /* Resmin boyutunu ayarla */
        margin-bottom: 20px; /* Resim ve başlık arasındaki boşluk */
    }

    .empty-state h2 {
        font-size: 2em;
        color: #343a40;
        margin-bottom: 10px; /* Başlık ve açıklama arasındaki boşluk */
    }

    .empty-state p {
        font-size: 1.2em;
        color: #6c757d;
        margin-bottom: 20px; /* Açıklama ve buton arasındaki boşluk */
    }

    .empty-state .btn {
        font-size: 1em;
        padding: 10px 20px;
    }
</style>