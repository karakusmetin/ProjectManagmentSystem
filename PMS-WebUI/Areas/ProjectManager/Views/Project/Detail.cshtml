@model ProjectDetailDto
<div id="loading">
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
</div>

<div class="container">
    <h1 class="my-4">Proje Yönetim Sistemi</h1>
    <form asp-controller="Project" asp-action="Update" method="post" enctype="multipart/form-data">
        <div class="container">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" value="@Model.Id" />
            <input type="hidden" asp-for="ProjectManagerId" value="@Model.ProjectManagerId" />
            <div class="row">
                <!-- Sol sütun -->
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="ProjectName">Proje Adı</label>
                        <input asp-for="ProjectName" type="text" class="form-control" id="projectName" placeholder="Proje adı girin">
                        <span asp-validation-for="ProjectName" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Budget" for="projectBudget">Bütçe</label>
                        <input asp-for="Budget" type="number" class="form-control" id="projectBudget" placeholder="Proje bütçesi girin">
                        <span asp-validation-for="Budget" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="EndDate">Bitiş Tarihi</label>
                        <input asp-for="EndDate" type="date" class="form-control" id="projectEndDate">
                        <span asp-validation-for="EndDate" class="text-danger"></span>
                    </div>
                    <div class="form-group md-12">
                        <a type="button" class="btn text-primary float-lg-right" data-toggle="modal" data-target="#uploadDocumentModal">
                            Pdf Ekle <i class="bx bx-plus"></i>
                        </a>
                        <label>Proje Dokümanları</label>
                        <ul class="list-group">
                            @foreach (var document in Model.Documents)
                            {
                                if (Model.Documents.Count() != 0)
                                {
                                    <li class="list-group-item">
                                        @document.FileName
                                        <button type="button" class="btn btn-primary" onclick="viewPdf('@document.Id')">Görüntüle</button>
                                        <button type="button" class="btn btn-danger" onclick="confirmDelete('@document.Id')">Sil</button>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>

                <!-- Sağ sütun -->
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="Description">Açıklama</label>
                        <textarea asp-for="Description" class="form-control" id="projectDescription" rows="6"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Priority">Öncelik Seviyesi</label>
                        <div class="priority-buttons" id="projectPriority">
                            <button type="button" class="btn btn-high" data-value="High">Yüksek</button>
                            <button type="button" class="btn btn-medium" data-value="Medium">Orta</button>
                            <button type="button" class="btn btn-low" data-value="Low">Düşük</button>
                        </div>
                        <input asp-for="Priority" type="hidden" id="selectedPriority" name="Priority" value="@Model.Priority.ToString()">
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label>Proje Üyeleri</label>
                <a type="button" class="btn text-primary float-lg-right" data-toggle="modal" data-target="#addUserModal">
                    Üye Ekle <i class="bx bx-plus"></i>
                </a>
                <ul class="list-group">
                    @foreach (var users in Model.ProjectAppUsers)
                    {
                        <li class="list-group-item">@users.AppUser.FirstName @users.AppUser.LastName (@users.AppUser.Email)</li>
                    }
                </ul>
            </div>
        </div>

        <label>Proje Görevleri</label>
        <div class="task-container">
            @foreach (var task in Model.Tasks)
            {
                <div class="task-card card">
                    <div class="card-body @(task.Priority == PriorityLevel.High ? "priority-high" : task.Priority == PriorityLevel.Medium ? "priority-medium" : "priority-low")">
                        <h5 class="card-title">@task.TaskName</h5>
                        <p class="card-text">Öncelik: @task.Priority</p>
                        <p class="card-text">Durum: @(task.UpdateStatus == TaskUpdateStatus.Completed ? "Tamamlandı" : task.UpdateStatus == TaskUpdateStatus.ToDo ? "Henüz Başlanmadı" : task.UpdateStatus == TaskUpdateStatus.InProgress ? "Üzerinde Çalışıyor" : "Süresi Doldu" )</p>
                        <p class="card-text">Görev Sonu: @task.EndDate</p>
                        <p class="card-text">Sorumlu: @task.AppUser.Email</p>
                    </div>
                    <div class="card-footer">
                        <a asp-area="ProjectManager" asp-controller="Task" asp-action="Update" asp-route-taskId="@task.Id" class="btn btn-secondary">Düzenle</a>
                        <a href="#" class="btn btn-danger stop-task" data-task-id="@task.Id">Görevi Durdur</a>
                    </div>
                </div>
            }
            <div class="task-card card">
                <div class="card-body">
                    <h5 class="card-title">+Yeni Görev</h5>
                </div>
                <div class="card-footer text-center">
                    <a asp-controller="Task" asp-action="Add" asp-route-projectId="@Model.Id" class="btn btn-success">Yeni Görev Ekle</a>
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary btn-save">Kaydet</button>
    </form>
    <div class="row mt-4">
        <div class="col-md-12 text-center">
            <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#deleteProjectModal" data-project-id="@Model.Id">
                Projeyi Durdur
            </button>
        </div>
    </div>
</div>

<!--  -->
<div id="stopTaskModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Görevi Durdur</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Görevi durdurmak istediğinize emin misiniz?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="confirmStopTask">Evet, Durdur</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="pdfModal" tabindex="-1" role="dialog" aria-labelledby="pdfModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="pdfModalLabel">Projeye Ait Pdf Görüntüle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <iframe id="pdfViewer" width="100%" height="700px"></iframe>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="uploadDocumentModal" tabindex="-1" role="dialog" aria-labelledby="uploadDocumentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadDocumentModalLabel">Döküman Yükle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="uploadDocumentForm" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="documentFile">Dosya Seç</label>
                        <input type="file" class="form-control-file" id="documentFile" name="fromFile" accept="application/pdf">
                    </div>
                    <input type="hidden" name="projectId" value="@Model.Id" />
                    <button type="submit" class="btn btn-primary">Yükle</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Silme Modal -->
<div class="modal fade" id="deleteDocumentModal" tabindex="-1" role="dialog" aria-labelledby="deleteDocumentModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteDocumentModalLabel">Dökümanı Sil</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Bu dökümanı silmek istediğinize emin misiniz?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Vazgeç</button>
                <form id="deleteDocumentForm" method="post" action="/ProjectManager/Document/Delete">
                    <input type="hidden" id="documentIdToDelete" name="documentId">
                    <input type="hidden" id="projectIdToDelete" name="projectId" value="@Model.Id">
                    <button type="submit" class="btn btn-danger">Sil</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="deleteProjectModal" tabindex="-1" role="dialog" aria-labelledby="deleteProjectModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteProjectModalTitle">Projeyi Durdur</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                            Bu İşlem Geri Alınamaz
                Bu projeyi durdurmak istediğinizden emin misiniz?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton" data-project-id="@Model.Id">Projeyi Durdur</button>
            </div>
        </div>
    </div>
</div>>
<!-- User Ekle -->
<div class="modal fade" id="addUserModal" tabindex="-1" role="dialog" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">Üye Ekle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addUserForm">
                    <div class="mb-3">
                        <label for="appUserEmail">Proje Atanan Kişinin Email Adresi:</label>
                        <input type="text" id="appUserEmail" name="appUserEmail" value="" autocomplete="off">
                        <input type="hidden" id="hiddenAppUserId" name="AppUserId">
                        <div id="userAutocompleteSuggestions" class="autocomplete-suggestions"></div>
                    </div>
                    <div id="selectedUsersContainer"></div>
                    <input type="hidden" name="projectId" value="@Model.Id" />
                    <button type="submit" class="btn btn-primary">Ekle</button>
                </form>
            </div>
        </div>
    </div>
</div>



@section Scripts
{

    <script>
        $(document).ready(function () {
            var taskId; // taskId'yi global değişken yap

            // Görevi durdur butonuna tıklanınca
            $(".stop-task").on("click", function () {
                taskId = $(this).data("task-id"); // taskId'yi güncelle

                // Modalı göster
                $("#stopTaskModal").modal("show");
            });

            // Görevi durdurma işlemini onayla butonuna tıklanınca
            $("#confirmStopTask").on("click", function () {
                // AJAX ile görevi durdurma işlemini gerçekleştir
                $.ajax({
                    url: "/ProjectManager/Task/Delete",
                    type: "POST",
                    data: { taskId: taskId },
                    success: function (result) {
                        // Başarılıysa, modalı kapat
                        $("#stopTaskModal").modal("hide");

                        // Toastr mesajı göster
                        toastr.success('Görev başarıyla durduruldu', 'Başarılı');

                        // Sayfayı yenile
                        setTimeout(function () {
                            location.reload();
                        }, 1500); // 2 saniye gecikme
                    },
                    error: function (xhr, status, error) {
                        // Hata durumunda hata mesajını göster
                        console.error(xhr.responseText);
                    }
                });
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            const emailInput = document.getElementById('appUserEmail');
            const userSuggestionsBox = document.getElementById('userAutocompleteSuggestions');
            const selectedUsersContainer = document.getElementById('selectedUsersContainer');
            const hiddenAppUserId = document.getElementById('hiddenAppUserId');
            emailInput.addEventListener('input', function () {
                const query = emailInput.value;

                if (query.length === 0) {
                    userSuggestionsBox.innerHTML = '';
                    return;
                }

                fetch(`/api/usersapi/search-project-users?email=${query}`)
                    .then(response => response.json())
                    .then(data => {
                        userSuggestionsBox.innerHTML = '';
                        data.forEach(user => {
                            const suggestion = document.createElement('div');
                            suggestion.classList.add('autocomplete-suggestion');
                            suggestion.textContent = `${user.fullName} (${user.email})`;
                            suggestion.dataset.userId = user.id;
                            userSuggestionsBox.appendChild(suggestion);
                        });
                    })
                    .catch(error => console.error('Error fetching users:', error));
            });

            userSuggestionsBox.addEventListener('click', function (event) {
                if (event.target.classList.contains('autocomplete-suggestion')) {
                    const userId = event.target.dataset.userId;
                    const userName = event.target.textContent;

                    const userBadge = document.createElement('span');
                    userBadge.classList.add('badge', 'badge-secondary', 'm-1');
                    userBadge.textContent = userName;

                    const removeBtn = document.createElement('span');
                    removeBtn.classList.add('remove-btn');
                    removeBtn.textContent = 'x';
                    userBadge.appendChild(removeBtn);

                    selectedUsersContainer.appendChild(userBadge);

                    hiddenAppUserId.value = userId;

                    emailInput.value = '';
                    userSuggestionsBox.innerHTML = '';
                }
            });

            selectedUsersContainer.addEventListener('click', function (event) {
                if (event.target.classList.contains('remove-btn')) {
                    const badge = event.target.parentElement;
                    badge.remove();
                    hiddenAppUserId.value = '';
                }
            });

            $('#addUserForm').submit(function (event) {
                event.preventDefault();
                const formData = $(this).serialize();
                $.ajax({
                    url: '/ProjectManager/User/Add',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        console.log(response);
                        if (response.success) {
                            toastr.success(response.message, 'Başarılı');
                            $("#addUserModal").modal('hide');
                            location.reload();
                        } else {
                            toastr.error(response.message, 'Hata');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                        toastr.error('Kullanıcı eklenirken bir hata oluştu: ' + xhr.responseText, 'Hata');
                    }
                });
            });
        });
    </script>
    <script>
        function viewPdf(documentId) {
            $.ajax({
                url: '/ProjectManager/Project/GetDocument',
                type: 'GET',
                data: { documentId: documentId },
                success: function (response) {
                    console.log(response);
                    var pdfViewer = document.getElementById('pdfViewer');
                    if (pdfViewer) {
                        pdfViewer.src = 'data:' + response.contentType + ';base64,' + response.base64String;
                        $('#pdfModal').modal('show');
                    } else {
                        console.error("PDF viewer element not found");
                    }
                },
                error: function () {
                    console.error("Proje yüklenemedi");
                }
            });
        }
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            console.log("Sayfa yüklendi");

            var selectedPriorityInput = document.getElementById("selectedPriority");
            if (selectedPriorityInput) {
                var priorityButtons = document.querySelectorAll(".priority-buttons button");
                var initialPriority = selectedPriorityInput.value;
                priorityButtons.forEach(function (button) {
                    if (button.getAttribute("data-value") === initialPriority) {
                        button.classList.add("btn-selected");
                    }
                });

                priorityButtons.forEach(function (button) {
                    button.addEventListener("click", function () {
                        var selectedValue = this.getAttribute("data-value");
                        selectedPriorityInput.value = selectedValue;
                        priorityButtons.forEach(function (btn) {
                            btn.classList.remove("btn-selected");
                        });
                        this.classList.add("btn-selected");
                    });
                });
            } else {
                console.log("Priority input elementi bulunamadı.");
            }
        });
    </script>

    <script>
        $(document).ready(function () {

            $("#confirmDeleteButton").on("click", function () {
                var projectId = this.getAttribute("data-project-id");
                $.ajax({
                    url: '/ProjectManager/Project/Delete',
                    type: 'POST',
                    data: { projectId: projectId },
                    success: function (response) {
                        toastr.success(response.message, "Başarılı");

                        setTimeout(function () {
                            window.location.href = '/ProjectManager/Home/Index';
                        }, 1500); // 1.5 saniye gecikme
                    },
                    error: function (xhr, status, error) {
                        console.error("Silme işlemi hatası:", xhr.status, xhr.statusText, xhr.responseText);
                        toastr.error("Proje silinirken bir hata oluştu. Hata detayı: " + xhr.status + " " + xhr.statusText + " - " + xhr.responseText, "Hata");
                    }
                });
            });
        });
    </script>


    <script>
        $(document).ready(function () {
            $("#uploadDocumentForm").submit(function (event) {
                event.preventDefault();

                var formData = new FormData(this);

                $.ajax({
                    url: '/ProjectManager/Document/Add',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            $("#uploadDocumentModal").modal('hide');
                            location.reload();
                        } else {
                            alert(response.message || "Döküman yüklenirken bir hata oluştu.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                        alert("Döküman yüklenirken bir hata oluştu.");
                    }
                });
            });

            $("#deleteDocumentForm").submit(function (event) {
                event.preventDefault();

                var formData = $(this).serialize();

                $.ajax({
                    url: $(this).attr('action'),
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            $("#deleteDocumentModal").modal('hide');
                            location.reload();
                        } else {
                            alert(response.message || "Döküman silinirken bir hata oluştu.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                        alert("Döküman silinirken bir hata oluştu.");
                    }
                });
            });
        });

        function confirmDelete(documentId, projectId) {
            $('#documentIdToDelete').val(documentId);
            $('#projectIdToDelete').val(projectId);
            $('#deleteDocumentModal').modal('show');
        }
    </script>
}

<style>
    .badge {
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 0.75rem;
        margin: 0.25rem;
        border-radius: 0.25rem;
        background-color: #6c757d;
        color: white;
    }

        .badge .remove-btn {
            margin-left: 10px;
            font-size: 1.25rem;
            cursor: pointer;
            color: red;
        }
</style>

<style>
    .form-label {
        font-weight: bold;
        color: #333;
    }

    .form-select {
        width: 100%;
        padding: 0.375rem 0.75rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        border: 1px solid #3e2481;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .form-select option {
            color: #495057;
        }

    .priority-high {
        background-color: red; /* Yüksek öncelik için kırmızı */
        color: white;
    }

    .priority-medium {
        background-color: orange; /* Orta öncelik için turuncu */
        color: white;
    }

    .priority-low {
        background-color: green; /* Düşük öncelik için yeşil */
        color: white;
    }

    .priority-buttons button {
        margin: 5px;
        padding: 10px;
        border: 1px solid #ddd;
        cursor: pointer;
    }

    .btn-selected {
        border: 2px solid #000;
        background-color: #ddd;
    }
</style>

